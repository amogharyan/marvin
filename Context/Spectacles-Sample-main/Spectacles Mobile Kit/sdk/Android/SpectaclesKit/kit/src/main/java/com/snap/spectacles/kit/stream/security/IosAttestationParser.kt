package com.snap.spectacles.kit.stream.security

import com.snap.spectacles.kit.stream.SpectaclesStreamTrustManager
import org.bouncycastle.asn1.x509.X509Name
import org.bouncycastle.x509.X509V3CertificateGenerator
import java.math.BigInteger
import java.security.KeyFactory
import java.security.KeyPairGenerator
import java.security.cert.Certificate
import java.security.spec.X509EncodedKeySpec
import java.util.Calendar

/**
 * Extracts the attestation information from an attestation generated by Apple's DCAppAttestService.
 */
internal class IosAttestationParser {

    /**
     * Extracts the attestation information from an ios attestation.
     *
     * @param attestation The ios attestation.
     * @param challenge The challenge.
     * @return An [AndroidAttestationParser] object if attestation is available, or null if not.
     */
    fun parse(
        attestation: AuthenticationManager.Attestation.IosSpecific,
        challenge: ByteArray
    ): Pair<SpectaclesStreamTrustManager.SecurityAttributes, Certificate> {
        // This is a pseudo implementation
        val deviceProvision = SpectaclesStreamTrustManager.DeviceProvision.Ios("")
        val applicationProvision = SpectaclesStreamTrustManager.ApplicationProvision.Ios(
            false,
            byteArrayOf()
        )
        return SpectaclesStreamTrustManager.SecurityAttributes(
            SpectaclesStreamTrustManager.DeviceType.IOS,
            deviceProvision,
            applicationProvision
        ) to generateCertificate(attestation.publicKey)
    }

    /**
     * Covers the given encoded public key to a Certificate.
     */
    private fun generateCertificate(encodedPublicKey: ByteArray): Certificate {
        val publicKey = KeyFactory.getInstance("EC")
            .generatePublic(X509EncodedKeySpec(encodedPublicKey))

        val dummyKey = KeyPairGenerator.getInstance("RSA")
            .apply { initialize(2048) }
            .genKeyPair()
            .private

        val generator = X509V3CertificateGenerator().apply {
            setSerialNumber(BigInteger.valueOf(System.currentTimeMillis()))
            setNotBefore(Calendar.getInstance().apply { set(2000, 0, 1) }.time)
            setNotAfter(Calendar.getInstance().apply { set(2049, 11, 31) }.time)
            setSubjectDN(X509Name("CN=Spec,O=Snap"))
            setIssuerDN(X509Name("CN=Spec"))
            setSignatureAlgorithm("SHA256WITHRSA")
            setPublicKey(publicKey)
        }

        return generator.generate(dummyKey)
    }
}
