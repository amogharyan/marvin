name: CI/CD Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  # Job 1: Lint and Type Check
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install root dependencies
        run: npm install
      
      - name: Lint ai-voice workspace
        run: cd ai-voice && npm ci && npm run lint
        continue-on-error: true
      
      - name: Lint ar-core workspace
        run: cd ar-core && npm ci && npm run lint
        continue-on-error: true

  # Job 2: Test All Components
  test:
    name: Test All Components
    runs-on: ubuntu-latest
    needs: lint
    
    strategy:
      fail-fast: false
      matrix:
        component: [root, ai-voice, ar-core]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Test root integration
        if: matrix.component == 'root'
        run: |
          npm install
          npm run test:root
        env:
          NODE_ENV: test
      
      - name: Test workspace
        if: matrix.component != 'root'
        run: |
          cd ${{ matrix.component }}
          npm ci
          npm test
        env:
          NODE_ENV: test

  # Job 3: Build Check
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Build ai-voice
        run: |
          cd ai-voice
          npm ci
          npm run build
        continue-on-error: true
      
      - name: Build ar-core
        run: |
          cd ar-core
          npm ci
          npm run build
        continue-on-error: true

  # Job 4: Supabase Edge Functions Check
  edge-functions:
    name: Supabase Edge Functions Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x
      
      - name: Check Edge Functions directory
        id: check-dir
        run: |
          if [ -d "snap-cloud/functions" ] && [ -n "$(ls -A snap-cloud/functions 2>/dev/null)" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Edge Functions directory exists with content"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Edge Functions directory does not exist or is empty"
          fi
      
      - name: Lint Edge Functions
        if: steps.check-dir.outputs.exists == 'true'
        run: deno lint
        working-directory: snap-cloud/functions
        continue-on-error: true
      
      - name: Type check Edge Functions
        if: steps.check-dir.outputs.exists == 'true'
        run: deno check **/*.ts
        working-directory: snap-cloud/functions
        continue-on-error: true

  # Job 5: Database Migrations Check
  database:
    name: Database Migrations Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check migrations directory
        id: check-migrations
        run: |
          if [ -d "snap-cloud/migrations" ] && [ -n "$(ls -A snap-cloud/migrations 2>/dev/null)" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Migrations directory exists with content"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Migrations directory does not exist or is empty"
          fi
      
      - name: Validate SQL syntax
        if: steps.check-migrations.outputs.exists == 'true'
        run: |
          for file in snap-cloud/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file"
              # Basic SQL syntax check (checks for balanced parentheses and semicolons)
              grep -q ';' "$file" && echo "✓ $file appears valid" || echo "⚠ $file may be incomplete"
            fi
          done
        continue-on-error: true

  # Job 6: Integration Tests (Demo Flow)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run integration tests
        run: npm run test:root
        env:
          NODE_ENV: test
        continue-on-error: true
      
      - name: Generate test report
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Integration tests completed" >> $GITHUB_STEP_SUMMARY

  # Job 7: Status Check Summary
  status:
    name: CI/CD Status
    runs-on: ubuntu-latest
    needs: [lint, test, build, edge-functions, database, integration]
    if: always()
    
    steps:
      - name: Check status
        run: |
          echo "## CI/CD Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "All checks completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Edge Functions: ${{ needs.edge-functions.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Database: ${{ needs.database.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration: ${{ needs.integration.result }}" >> $GITHUB_STEP_SUMMARY
